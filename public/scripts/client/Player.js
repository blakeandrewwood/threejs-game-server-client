CUBES.Player = function(data) {  CUBES.Client.call(this, data);  this.mesh.scale.set(1.2, 1.2, 1.2);  this.mesh.material.color.setHex(0x7c3bff);};CUBES.Player.prototype = Object.create( CUBES.Client.prototype );CUBES.Player.prototype.updatePositionY = function(world) {  var x = Math.floor((mapFileSize - 1) / (mapSize / this.geometry.position.x));  var z = Math.floor((mapFileSize - 1) / (mapSize / this.geometry.position.z));  var v0 = world.getVert(x, z + 1);  var v1 = world.getVert(x, z);  var v2 = world.getVert(x + 1, z);  var v3 = world.getVert(x + 1, z + 1);  var yPos = this.getTriangleY(v0, v1, v2, v3, this.geometry.position);  var velocity = yPos - this.geometry.position.y;  var cutoff = 0.01;  // ** Set height  if (this.geometry.position.y != yPos && this.geometry.position.y < yPos - cutoff || this.geometry.position.y > yPos + cutoff) {    this.geometry.position.y += 0.4 * velocity;  }};CUBES.Player.prototype.translateAngle = function(amount) {    if(this.angle > 360){      this.angle = 0;    }    else if(this.angle < 0){      this.angle = 360;    }    this.angle += amount;    this.geometry.rotation.y = this.angle * Math.PI / 180;};CUBES.Player.prototype.move = function(delta, direction) {  switch(direction) {    case 'forward':      this.geometry.translateZ(this.speed * delta);      break;    case 'backward':      this.geometry.translateZ(-this.speed * delta);      break;    case 'left':      this.translateAngle((this.speed * 1.5) * delta);      break;    case 'right':      this.translateAngle(-(this.speed * 1.5) * delta);      break;  }};// ** CombatCUBES.Player.prototype.attack = function(hand) {  switch(hand) {    case 'left':      this.attackLeft();      break;    case 'right':      this.attackRight();      break;  }};CUBES.Player.prototype.attackLeft = function() {  console.log('attack!');  //var bullet = new CUBES.Bullet(this.geometry);};CUBES.Player.prototype.attackRight = function() {};// ** UpdateCUBES.Player.prototype.update = function(world) {  this.updatePositionY(world);  this.mesh.position.copy(this.geometry.position);  this.mesh.position.y = this.mesh.position.y + 2.5;  this.mesh.rotation.copy(this.geometry.rotation);  this.setServerData();};CUBES.Player.prototype.getTriangleY = function(v0, v1, v2, v3, p) {  var pz = (p.z - v0.z);  var px = -(p.x - v0.x);  var triangle = new THREE.Triangle();  var yPos = 0;  if (px > pz) {    triangle.set(v0, v1, v2);    var n = triangle.normal();    yPos = v0.y + (n.x * -px + n.z * pz) / -n.y;  } else {    triangle.set(v0, v2, v3);    var n = triangle.normal();    yPos = v0.y + (n.x * -px + n.z * pz) / -n.y;  }  return yPos;};